<?xml version="1.0"?>
<!-- Converted by db4-upgrade version 1.0 -->
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0-extension RaxBook-1.0" xml:id="using-glance-programmatically-with-glances-client"><info><title>Using Glance Programmatically with Glance's Client</title></info>
  
  <para>
    While it is perfectly acceptable to issue HTTP requests directly to
    Glance via its RESTful API, sometimes it is better to be able to
    access and modify image resources via a client class that removes
    some of the complexity and tedium of dealing with raw HTTP requests.
  </para>
  <para>
    Glance includes a client class for just this purpose. You can
    retrieve metadata about an image, change metadata about an image,
    remove images, and of course retrieve an image itself via this
    client class.
  </para>
  <para>
    Below are some examples of using Glance's Client class. We assume
    that there is a Glance server running at the address
    `glance.example.com` on port `9292`.
  </para>
  <section xml:id="requesting-a-list-of-public-vm-images"><info><title>Requesting a List of Public VM Images</title></info>
    
    <para>
      We want to see a list of available virtual machine images that the
      Glance server knows about.
    </para>
    <para>
      Using Glance's Client, we can do this using the following code
    </para>
    <para>
      ..code-block:: python
    </para>
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        print c.get_images()
      </para>
    
  </section>
  <section xml:id="requesting-detailed-metadata-on-public-vm-images"><info><title>Requesting Detailed Metadata on Public VM Images</title></info>
    
    <para>
      We want to see more detailed information on available virtual
      machine images that the Glance server knows about.
    </para>
    <para>
      Using Glance's Client, we can do this using the following code
    </para>
    <para>
      ..code-block:: python
    </para>
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        print c.get_images_detailed()
      </para>
    
  </section>
  <section xml:id="filtering-images-returned-via-get_images-and-get_images_detailed"><info><title>Filtering Images Returned via <literal>get_images()</literal>
    and <literal>get_images_detailed()</literal></title></info>
    
    <para>
      Both the <literal>get_images()</literal> and
      <literal>get_images_detailed()</literal> methods take query
      parameters that serve to filter the returned list of images.
    </para>
    <para>
      When calling, simply pass an optional dictionary to the method
      containing the filters by which you wish to limit results, with
      the filter keys being one or more of the below:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>name: NAME</literal>
        </para>
        <para>
          Filters images having a <literal>name</literal> attribute
          matching <literal>NAME</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>container_format: FORMAT</literal>
        </para>
        <para>
          Filters images having a <literal>container_format</literal>
          attribute matching <literal>FORMAT</literal>
        </para>
        
      </listitem>
      <listitem>
        <para>
          <literal>disk_format: FORMAT</literal>
        </para>
        <para>
          Filters images having a <literal>disk_format</literal>
          attribute matching <literal>FORMAT</literal>
        </para>
        
      </listitem>
      <listitem>
        <para>
          <literal>status: STATUS</literal>
        </para>
        <para>
          Filters images having a <literal>status</literal> attribute
          matching <literal>STATUS</literal>
        </para>
       
      </listitem>
      <listitem>
        <para>
          <literal>size_min: BYTES</literal>
        </para>
        <para>
          Filters images having a <literal>size</literal> attribute
          greater than or equal to <literal>BYTES</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>size_max: BYTES</literal>
        </para>
        <para>
          Filters images having a <literal>size</literal> attribute less
          than or equal to <literal>BYTES</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Here's a quick example that will return all images less than or
      equal to 5G in size and in the `saving` status.
    </para>
    
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        filters = {'status': 'saving', 'size_max': (5 * 1024 * 1024 *
        1024)} print c.get_images_detailed(filters=filters)
      </para>
    
  </section>
  <section xml:id="sorting-images-returned-via-get_images-and-get_images_detailed"><info><title>Sorting Images Returned via <literal>get_images()</literal>
    and <literal>get_images_detailed()</literal></title></info>
    
    <para>
      Two parameters are available to sort the list of images returned
      by these methods.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>sort_key: KEY</literal>
        </para>
        <para>
          Images can be ordered by the image attribute
          <literal>KEY</literal>. Acceptable values:
          <literal>id</literal>, <literal>name</literal>,
          <literal>status</literal>,
          <literal>container_format</literal>,
          <literal>disk_format</literal>, <literal>created_at</literal>
          (default) and <literal>updated_at</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>sort_dir: DIR</literal>
        </para>
        <para>
          The direction of the sort may be defined by
          <literal>DIR</literal>. Accepted values:
          <literal>asc</literal> for ascending or
          <literal>desc</literal> (default) for descending.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The following example will return a list of images sorted
      alphabetically by name in ascending order.
    </para>
    <para>
      ..code-block:: python
    </para>
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        print c.get_images(sort_key='name', sort_dir='asc')
      </para>
    
  </section>
  <section xml:id="requesting-detailed-metadata-on-a-specific-image"><info><title>Requesting Detailed Metadata on a Specific Image</title></info>
    
    <para>
      We want to see detailed information for a specific virtual machine
      image that the Glance server knows about.
    </para>
    <para>
      We have queried the Glance server for a list of public images and
      the data returned includes the `uri` field for each available
      image. This `uri` field value contains the exact location needed
      to get the metadata for a specific image.
    </para>
    <para>
      Continuing the example from above, in order to get metadata about
      the first public image returned, we can use the following code
    </para>
    <para>
      ..code-block:: python
    </para>
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        print
        c.get_image_meta("<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://glance.example.com/images/1">http://glance.example.com/images/1</link>")
      </para>
    
  </section>
  <section xml:id="retrieving-a-virtual-machine-image"><info><title>Retrieving a Virtual Machine Image</title></info>
    
    <para>
      We want to retrieve that actual raw data for a specific virtual
      machine image that the Glance server knows about.
    </para>
    <para>
      We have queried the Glance server for a list of public images and
      the data returned includes the `uri` field for each available
      image. This `uri` field value contains the exact location needed
      to get the metadata for a specific image.
    </para>
    <para>
      Continuing the example from above, in order to get both the
      metadata about the first public image returned and its image data,
      we can use the following code
    </para>
    <para>
      ..code-block:: python
    </para>
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        meta, image_file =
        c.get_image("<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://glance.example.com/images/1">http://glance.example.com/images/1</link>")
      </para>
      <para>
        print meta
      </para>
      <para>
        f = open('some_local_file', 'wb') for chunk in
        image_&lt;link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="file:"&gt;file:&lt;/link&gt; f.write(chunk) f.close()
      </para>
    
    
    <note>
<para>The return from Client.get_image() is a tuple of (`metadata`, `file`)
where `metadata` is a mapping of metadata about the image and `file` is a
generator that yields chunks of image data.</para>
</note>
  </section>
  <section xml:id="adding-a-new-virtual-machine-image"><info><title>Adding a New Virtual Machine Image</title></info>
    
    <para>
      We have created a new virtual machine image in some way (created a
      "golden image" or snapshotted/backed up an existing
      image) and we wish to do two things:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Store the disk image data in Glance
        </para>
      </listitem>
      <listitem>
        <para>
          Store metadata about this image in Glance
        </para>
      </listitem>
    </itemizedlist>
    <para>
      We can do the above two activities in a single call to the Glance
      client. Assuming, like in the examples above, that a Glance API
      server is running at `glance.example.com`, we issue a call to
      `glance.client.Client.add_image`.
    </para>
    <para>
      The method signature is as follows:
    </para>
    <screen>
glance.client.Client.add_image(image_meta, image_data=None)
</screen>
    <para>
      The `image_meta` argument is a mapping containing various image
      metadata. The `image_data` argument is the disk image data and is
      an optional argument.
    </para>
    <para>
      The list of metadata that `image_meta` can contain are listed
      below.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          `name`
        </para>
        <para>
          This key/value is required. Its value should be the name of
          the image.
        </para>
        <para>
          Note that the name of an image <emphasis>is not unique to a
          Glance node</emphasis>. It would be an unrealistic expectation
          of users to know all the unique names of all other user's
          images.
        </para>
      </listitem>
      <listitem>
        <para>
          `id`
        </para>
        <para>
          This key/value is optional.
        </para>
        <para>
          When present, Glance will use the supplied identifier for the
          image. If the identifier already exists in that Glance node,
          then a `glance.common.exception.Duplicate` will be raised.
        </para>
        <para>
          When this key/value is <emphasis>not</emphasis> present,
          Glance will generate an identifier for the image and return
          this identifier in the response (see below)
        </para>
      </listitem>
      <listitem>
        <para>
          `store`
        </para>
        <para>
          This key/value is optional. Valid values are one of `file`,
          `s3` or `swift`
        </para>
        <para>
          When present, Glance will attempt to store the disk image data
          in the backing store indicated by the value. If the Glance
          node does not support the backing store, Glance will raise a
          `glance.common.exception.BadRequest`
        </para>
        <para>
          When not present, Glance will store the disk image data in the
          backing store that is marked default. See the configuration
          option `default_store` for more information.
        </para>
      </listitem>
      <listitem>
        <para>
          `type`
        </para>
        <para>
          This key/values is required. Valid values are one of `kernel`,
          `machine`, `raw`, or `ramdisk`.
        </para>
      </listitem>
      <listitem>
        <para>
          `size`
        </para>
        <para>
          This key/value is optional.
        </para>
        <para>
          When present, Glance assumes that the expected size of the
          request body will be the value. If the length in bytes of the
          request body <emphasis>does not match</emphasis> the value,
          Glance will raise a `glance.common.exception.BadRequest`
        </para>
        <para>
          When not present, Glance will calculate the image's size based
          on the size of the request body.
        </para>
      </listitem>
      <listitem>
        <para>
          `is_public`
        </para>
        <para>
          This key/value is optional.
        </para>
        <para>
          When present, Glance converts the value to a boolean value, so
          "on, 1, true" are all true values. When true, the
          image is marked as a public image, meaning that any user may
          view its metadata and may read the disk image from Glance.
        </para>
        <para>
          When not present, the image is assumed to be <emphasis>not
          public</emphasis> and specific to a user.
        </para>
      </listitem>
      <listitem>
        <para>
          `properties`
        </para>
        <para>
          This key/value is optional.
        </para>
        <para>
          When present, the value is assumed to be a mapping of
          free-form key/value attributes to store with the image.
        </para>
        <para>
          For example, if the following is the value of the `properties`
          key in the `image_meta` argument:
        </para>
        <screen>
{'distro': 'Ubuntu 10.10'}
</screen>
        <para>
          Then a key/value pair of "distro"/"Ubuntu
          10.10" will be stored with the image in Glance.
        </para>
        <para>
          There is no limit on the number of free-form key/value
          attributes that can be attached to the image with
          `properties`. However, keep in mind that there is a 8K limit
          on the size of all HTTP headers sent in a request and this
          number will effectively limit the number of image properties.
        </para>
        <para>
          If the `image_data` argument is omitted, Glance will add the
          `image_meta` mapping to its registries and return the
          newly-registered image metadata, including the new image's
          identifier. The `status` of the image will be set to the value
          `queued`.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      As a complete example, the following code would add a new machine
      image to Glance
    </para>
    
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <variablelist>
        <varlistentry>
          <term>
            meta = {'name': 'Ubuntu 10.10 5G',
          </term>
          <listitem>
            <para>
              'type': 'machine', 'is_public': True, 'properties':
              {'distro': 'Ubuntu 10.10'}}
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        new_meta = c.add_image(meta, open('/path/to/image.tar.gz'))
      </para>
      <para>
        print 'Stored image. Got identifier: %s' % new_meta['id']
      </para>
    
  </section>
  <section xml:id="requesting-image-memberships"><info><title>Requesting Image Memberships</title></info>
    
    <para>
      We want to see a list of the other system tenants that may access
      a given virtual machine image that the Glance server knows about.
    </para>
    <para>
      Continuing from the example above, in order to get the memberships
      for the image with ID 1, we can use the following code
    </para>
   
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        members = c.get_image_members(1)
      </para>
    
    
    <note>
<para>The return from Client.get_image_members() is a list of dictionaries.  Each
dictionary has a `member_id` key, mapping to the tenant the image is shared
with, and a `can_share` key, mapping to a boolean value that identifies
whether the member can further share the image.</para>
</note>
  </section>
  <section xml:id="requesting-member-images"><info><title>Requesting Member Images</title></info>
    
    <para>
      We want to see a list of the virtual machine images a given system
      tenant may access.
    </para>
    <para>
      Continuing from the example above, in order to get the images
      shared with 'tenant1', we can use the following code
    </para>
   
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        images = c.get_member_images('tenant1')
      </para>
    
    
    <note>
<para>The return from Client.get_member_images() is a list of dictionaries.  Each
dictionary has an `image_id` key, mapping to an image shared with the member,
and a `can_share` key, mapping to a boolean value that identifies whether
the member can further share the image.</para>
</note>
  </section>
  <section xml:id="adding-a-member-to-an-image"><info><title>Adding a Member To an Image</title></info>
    
    <para>
      We want to authorize a tenant to access a private image.
    </para>
    <para>
      Continuing from the example above, in order to share the image
      with ID 1 with 'tenant1', and to allow 'tenant2' to not only
      access the image but to also share it with other tenants, we can
      use the following code
    </para>
 
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        c.add_member(1, 'tenant1') c.add_member(1, 'tenant2', True)
      </para>
    
    <para>
      ..note:
    </para>
    <screen>
The Client.add_member() function takes one optional argument, the `can_share`
value.  If one is not provided and the membership already exists, its current
`can_share` setting is left alone.  If the membership does not already exist,
then the `can_share` setting will default to `False`, and the membership will
be created.  In all other cases, existing memberships will be modified to use
the specified `can_share` setting, and new memberships will be created with
it.  The return value of Client.add_member() is not significant.
</screen>
  </section>
  <section xml:id="removing-a-member-from-an-image"><info><title>Removing a Member From an Image</title></info>
    
    <para>
      We want to revoke a tenant's authorization to access a private
      image.
    </para>
    <para>
      Continuing from the example above, in order to revoke the access
      of 'tenant1' to the image with ID 1, we can use the following code
    </para>
   
    
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <para>
        c.delete_member(1, 'tenant1')
      </para>
    
    <para>
      ..note:
    </para>
    <screen>
The return value of Client.delete_member() is not significant.
</screen>
  </section>
  <section xml:id="replacing-a-membership-list-for-an-image"><info><title>Replacing a Membership List For an Image</title></info>
    
    <para>
      All existing image memberships may be revoked and replaced in a
      single operation.
    </para>
    <para>
      Continuing from the example above, in order to replace the
      membership list of the image with ID 1 with two entries--the first
      allowing 'tenant1' to access the image, and the second allowing
      'tenant2' to access and further share the image, we can use the
      following code
    </para>
  
      <para>
        from glance.client import Client
      </para>
      <para>
        c = Client("glance.example.com", 9292)
      </para>
      <variablelist>
        <varlistentry>
          <term>
            c.replace_members(1, {'member_id': 'tenant1', 'can_share':
            False},
          </term>
          <listitem>
            <para>
              {'member_id': 'tenant2', 'can_share': True})
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    

    <note>
<para>The first argument to Client.replace_members() is the opaque identifier of
the image; the remaining arguments are dictionaries with the keys
`member_id` (mapping to a tenant name) and `can_share`.  Note that
`can_share` may be omitted, in which case any existing membership for the
specified member will be preserved through the replace operation.
</para>
<para>The return value of Client.replace_members() is not significant.</para>
</note>
  </section>
</chapter>
